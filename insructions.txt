-what we are basically doing in this code is this : we create a grpc service over a HTTP protocol
-so there will be a server and a client the order is service and kitchen is client
-we can create grpc over any protocol, even websockets  for two-way data sharing


to auto create the files run in terminal :
protoc `
--proto_path=protobuf "protobuf/orders.proto" `
--go_out=services/common/genproto/orders --go_opt=paths=source_relative `
--go-grpc_out=services/common/genproto/orders --go-grpc_opt=paths=source_relative


-now remember we created stucts in orders.proto, when the auto files are generated, see the /common/genproto/orders/orders.pb.go line 170 for example we see that the order struct's protobuf format generated. now whenever we send data it will not be json but this protobuf struct only

-similarily there will be services (functions over grpc server) that will be created as a fallback, but we need to implement the real business logic ourselves (see orders.grpc.pb.go) for the CreateOrders service fallback function that was autogenerated. We implement this in the services/orders/handler/grpc.go file